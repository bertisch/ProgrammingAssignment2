mat <- matrix(1:4,2,2)
solve(mat)
matrixobject <- makeCacheMatrix(mat)
## Functions that cache a matrix's inverse#
#
## Following function makes a speical matrix object #
#
makeCacheMatrix <- function(x = matrix()) {#
        m <- NULL#
        ## Set the value of the matrix#
        set <- function(y) {#
        	x <<- y#
        	m <<- NULL#
        }#
        ## Get the value of the matrix#
        get <- function() {#
        	x#
        }#
        ## Set the value of the inverse of that matrix#
        setinverse <- function(inverse) {#
        	m <<- inverse#
        }#
        ## Get the value of the inverse of that matrix#
        getinverse <- function() {#
        	m#
        }#
        list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)#
}#
## Following function calculates the inverse of the special matrix#
## created in the function above#
#
cacheSolve <- function(x, ...) {#
        m <- x$getinverse()#
        ## Returns matrix if it is already calculated, skipping calculation#
        if(!is.null(m)) {#
        	message("getting cached data")#
        	return(m)#
        }#
        ## Otherwise, it gets the matrix and calculates inverse#
        data <- x$get()#
        m <- inverse(data, ...)#
        ## Finally, it sets the value of the inverse in the cache #
        x$setinverse(m)#
        ## Returns the matrix#
        m#
}
matrixobject <- makeCacheMatrix(mat)
cacheSolve(matrixobject)
## Functions that cache a matrix's inverse#
#
## Following function makes a speical matrix object #
#
makeCacheMatrix <- function(x = matrix()) {#
        m <- NULL#
        ## Set the value of the matrix#
        set <- function(y) {#
        	x <<- y#
        	m <<- NULL#
        }#
        ## Get the value of the matrix#
        get <- function() {#
        	x#
        }#
        ## Set the value of the inverse of that matrix#
        setinverse <- function(inverse) {#
        	m <<- inverse#
        }#
        ## Get the value of the inverse of that matrix#
        getinverse <- function() {#
        	m#
        }#
        list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)#
}#
## Following function calculates the inverse of the special matrix#
## created in the function above#
#
cacheSolve <- function(x, ...) {#
        m <- x$getinverse()#
        ## Returns matrix if it is already calculated, skipping calculation#
        if(!is.null(m)) {#
        	message("getting cached data")#
        	return(m)#
        }#
        ## Otherwise, it gets the matrix and calculates inverse#
        data <- x$get()#
        m <- solve(data)#
        ## Finally, it sets the value of the inverse in the cache #
        x$setinverse(m)#
        ## Returns the matrix#
        m#
}
mat <- matrix(1:4,2,2)
matrixobject <- makeCacheMatrix(mat)
cacheSolve(matrixobject)
